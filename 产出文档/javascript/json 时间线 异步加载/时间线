js加载时间线
    1.创建Document对象，开始解析web页面。这个阶段的document.readyState  = "loading".
    2.遇到link外部css，创建线程加载，并继续解析文档。
    3.遇到script外部js，并且没有设置async，defer，浏览器加载，并阻塞。等待js加载完成并执行该脚本，然后继续解析文档。
    4.遇到script外部js，并且设置async，defer，浏览器创建线程加载，并继续解析文档。
    对async属性的脚本，脚本加载完之后立即执行。(异步加载禁止使用document.write(),当做文档流输出。会清除当前文档流，并且替换)
    5.遇到img标签的话，先正常解析dom（script也是Dom结构）结构，然后浏览器异步加载src，并继续解析文档。
    6.当文档解析(DomTree完成)完成后，document.readyState = "interactive".
    7.当文档解析(DomTree完成)完成后，所有设置defer的脚本会按照顺序执行。
    8.document对象触发DOMContentLoaded事件，这也标志着程序从同步脚本执行阶段，转化为事件驱动阶段。
    9.当所有async的脚本加载完成并执行后，img等加载完成后，document.readyState = "complete" ,window对象触发load事件
    10.从此之后，以异步响应的方式处理用户输入，网络事件等。



    script代码块写到head里面
    document.addEventListener('DomContentLoaded',function(){

    },false);

    等到Dom全部解析完之后就开始执行。而不是全部加载完。