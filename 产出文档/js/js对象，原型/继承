继承发展史
1.传统形式   -->原型链
    过多的继承了没用的属性
2.借用构造函数和call
    不能继承借用构造函数的原型
    每次构造函数都要多走一个函数
3.共享原型
    缺点大家都共用一个原型，不能够单独添加自己想要的属性，一更改就会全部跟着变。
4.圣杯模式
    通过一个中间件来继承，既能够继承同时又能拥有自己单独的属性。
    function inherit(Target,Origin) {
        function F() {};//中间件
        F.prototype = Origin.prototype;
        Target.prototype = new F();
        Target.prototype.constuctor = Target;//修正Target的构造函数指向
        Target.prototype.uber = Origin.prototype;//表明函数的最终父类是谁
    }
    高端的方法
    var inherit =(function(){
        var F  = function(){};
        return function(Target,Origin){
             F.prototype = Origin.prototype;
        Target.prototype = new F();
        Target.prototype.constuctor = Target;
        Target.prototype.uber = Origin.prototype;
        }
    }());
使用了闭包把var F当做一个私有变量。
