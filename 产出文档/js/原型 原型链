原型：原型是function对象的一个属性。它定义了构造函数制造出来的对象的共有祖先（类似于继承）。
通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。

对象可以删除属性 delete 属性

构造函数的固定属性可以放到原型中。提取公有属性。

对象的原型中有constructor(可以手动改变)。constructor里面是对象的构造函数。

构造函数内部原理三段论的深入理解：
只有第一步不一样   隐式的构造的this对象，并不是真的空的。里面有__proto__指向的原型(所以说具体的对象是从__proto__指向的
空间里取值，而不是直接从Person.prototype中取数据)
var  this = {
    __proto__: Person.prototype
}

原型链：Object.prototype是绝大多数对象(因为Object.create(null)的存在)的原型链终点(里面有很多属性)。
Object.prototype没有__proto__了，因为它是终点。

原型链上的属性一般来说都不可以通过子代来进行增删改查。


var obj1 = Object.create(原型);
就会把原型参数当做obj1的原型 不可以手动添加原型，但可以手动修改已有原型。

undefined就是一个原始值，它没有原型，所以没有toString方法
null也没有原型，也没有toString


Object有toString方法，它底下的Number，String，Array等包装类都重写了toString方法，所以不同类型的数据调用toString方法
输出各异


document.write其实隐式调用了toString方法


js尽量避免小数运算，因为精度不准确

可正常计算的范围 小数点前十六位，小数点后十六位

call/apply重要
改变this指向


